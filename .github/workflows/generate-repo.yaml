name: Generate New Repository

on:
  workflow_dispatch:
    inputs:
      artifact-id:
        description: 'Nome do repositório a ser criado'
        required: true
        type: string
      type:
        description: 'Tipo do repositório a ser criado (app ou lib)'
        required: true
        type: choice
        options:
          - app
          - lib

jobs:
  generate-repo:
    runs-on: ubuntu-latest

    steps:          
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Validate repository existence
        id: validate-repo
        run: |
          REPO_EXISTS=$(gh repo view "${{ github.repository_owner }}/${{ inputs.artifact-id }}" --json name -q '.name' 2>/dev/null || echo "false")
          if [ "$REPO_EXISTS" != "false" ]; then
            echo "::error::Repositório ${{ inputs.artifact-id }} já existe na organização."
            exit 1
          fi

      - name: Set repository template based on type
        id: set-repo
        run: |
          if [ "${{ inputs.type }}" == "app" ]; then
            echo "REPO=app-template" >> $GITHUB_ENV
          else
            echo "REPO=lib-template" >> $GITHUB_ENV
          fi

      - name: Create new repository from template
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh repo create "${{ github.repository_owner }}/${{ inputs.artifact-id }}" --template "${{ github.repository_owner }}/${{ env.REPO }}" --private

      - name: Pause for 5 seconds
        run: sleep 5 
      
      - name: Clone the new repository
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh repo clone "${{ github.repository_owner }}/${{ inputs.artifact-id }}"
          
      - name: Update ArtifactId in gradle.properties
        working-directory: ${{ inputs.artifact-id }}
        run: |
          sed -i "s/artifactId=.*/artifactId=${{ inputs.artifact-id }}/" gradle.properties

      - name: Commit and push changes
        working-directory: ${{ inputs.artifact-id }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin "https://$GH_TOKEN@github.com/${{ github.repository_owner }}/${{ inputs.artifact-id }}.git"
          git add .
          git commit -m "Update and artifact-id to ${{ inputs.artifact-id }}"
          git push origin master

      - name: Add repository link to summary
        run: |
          echo "Novo repositório criado: [${{ inputs.artifact-id }}](https://github.com/${{ github.repository_owner }}/${{ inputs.artifact-id }})" >> release_report.md
          echo "\`\`\`" >> release_report.md
          echo "git clone https://github.com/${{ github.repository_owner }}/${{ inputs.artifact-id }}.git" >> release_report.md
          echo "\`\`\`" >> release_report.md
          cat release_report.md >> $GITHUB_STEP_SUMMARY
          
