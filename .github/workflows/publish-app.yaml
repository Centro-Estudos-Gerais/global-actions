name: Build and Publish Docker Image

on:
    workflow_call:
        inputs:
            isLatestTag:
                description: 'Is this the latest tag?'
                type: boolean
                required: true
                default: false
        secrets:
            GH_TOKEN:
                required: true

jobs:
    setup-pipeline:
        name: Setup Pipeline
        runs-on: ubuntu-latest
        outputs:
            artifact-name: ${{ steps.create-artifact-name.outputs.artifact-name }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Setup Java Environment
              uses: actions/setup-java@v2
              with:
                java-version: '21'
                distribution: 'temurin'
                cache: gradle           
            
            - name: Build do Projeto
              uses: gradle/gradle-build-action@v2
              with:
                arguments: assemble

            - name: Executar Testes
              uses: gradle/gradle-build-action@v2
              with:
                arguments: test
   
            - name: Extract version from build.gradle
              id: get_version
              run: |
                VERSION=$(grep -oP 'version=\K.*' gradle.properties)
                echo "VERSION=$VERSION" >> $GITHUB_ENV
                          
            - name: Generate Docker tag
              id: generate_tag
              run: |
                TAG="ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]'):${{ env.VERSION }}"
                TAG_LATEST="ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]'):latest"
                echo "TAG=$TAG" >> $GITHUB_ENV
                echo "TAG_LATEST=$TAG_LATEST" >> $GITHUB_ENV
      
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
    
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v1
              with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GH_TOKEN }}
    
            - name: Build and push Docker image
              uses: docker/build-push-action@v2
              with:
                context: .
                push: true
                tags: ${{ env.TAG }}         
                
            - name: Build and push Docker image as latest tag
              if: ${{ inputs.isLatestTag == true }}
              uses: docker/build-push-action@v2 
              with:
                context: .
                push: true
                tags: ${{ env.TAG_LATEST }}    
    
            - name: Generate report latest tag
              if: ${{ inputs.isLatestTag == true }}
              run: |
                  echo "## Build Report" >> $GITHUB_STEP_SUMMARY
                  echo "Version: ${{ env.version }}" >> $GITHUB_STEP_SUMMARY
                  echo "Repository: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
                  echo "Build and push completed successfully." >> $GITHUB_STEP_SUMMARY
    
            - name: Generate report
              run: |
                echo "## Build Report" >> $GITHUB_STEP_SUMMARY
                echo "Version: ${{ env.version }}" >> $GITHUB_STEP_SUMMARY
                echo "Repository: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
                echo "Build and push completed successfully." >> $GITHUB_STEP_SUMMARY
                echo "To test the image, run the following commands:" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`sh" >> $GITHUB_STEP_SUMMARY
                echo "docker pull ${{ env.TAG }}" >> $GITHUB_STEP_SUMMARY
                echo "docker run -d ${{ env.TAG }}" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
            - name: Create Pull Request
              env:
                GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
              run: gh pr create --title "Merge from ${{ github.ref }} into master" --body "Automatic merges by github action publish-lib.yml" --base master --head ${{ github.ref }}
      
            - name: Gerar Resumo do Workflow
              run: |
                  echo "## ðŸš€ RelatÃ³rio do Workflow" >> $GITHUB_STEP_SUMMARY
                  echo "| Etapa  | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
                  echo "| Create-PR | âœ… Sucesso |" >> $GITHUB_STEP_SUMMARY
    
        
    